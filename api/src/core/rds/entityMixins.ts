import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  Generated,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from 'typeorm';

// Mixin function for BaseEntity
export function BaseEntityMixin<T extends new (...args: any[]) => {}>(Base2: T) {
  abstract class BaseEntityClass extends Base2 {
    // Define the `id` property as a primary key in the database.
    // The `type: 'int'` option specifies that the ID should be stored as a int in the database,
    // and it is marked as optional (?) to allow for flexibility in initialization.
    @PrimaryGeneratedColumn('increment', { type: 'int' })
    id!: number;

    // Define the `createdTs` property to store the timestamp when the entity was created.
    // The default value is set to the current date and time.
    @CreateDateColumn()
    createdTs!: Date;

    // Define the `updatedTs` property to store the timestamp when the entity was last updated.
    // The `onUpdate: () => new Date()` option specifies that this property should be automatically updated to the current date and time whenever the entity is updated.
    @UpdateDateColumn()
    updatedTs!: Date;

    // Define the `deletedTs` property to store the timestamp when the entity was deleted, if applicable.
    // The `nullable: true` option allows this property to be null if the entity has not been deleted.
    @DeleteDateColumn()
    deletedTs?: Date;
  }
  return BaseEntityClass;
}

// Mixin function for UUIDBase
export function UUIDBaseMixin<T extends new (...args: any[]) => {}>(Base2: T) {
  abstract class UUIDBaseClass extends Base2 {
    // Define the `uuid` property with a column type of UUID in the database.
    // The `defaultRaw: 'gen_random_uuid()'` option specifies that the default value should be generated by the dataBase2using the `gen_random_uuid()` function.
    @Column()
    @Generated('uuid')
    @Index()
    uuid!: string;
  }
  return UUIDBaseClass;
}

// Mixin function for who created and updated entity
export function AuditMixin<T extends new (...args: any[]) => {}>(Base2: T) {
  abstract class UUIDBaseClass extends Base2 {
    @Column({ type: 'int', nullable: false })
    @Index()
    createdBy!: number;

    @Column({ type: 'int', nullable: false })
    @Index()
    updatedBy!: number;
  }
  return UUIDBaseClass;
}
